package com.github.t1.webresource;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.*;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.Status;

import org.slf4j.*;

@Path("/")
@Stateless
public class TestEntityWebResource {
    private final Logger log = LoggerFactory.getLogger(TestEntityWebResource.class);

    @PersistenceContext
    private EntityManager em;

    @GET
    @Path("testentities")
    public List<TestEntity> list() {
        log.debug("getAll");

        return em.createQuery("FROM TestEntity ORDER BY id", TestEntity.class).getResultList();
    }

    @GET
    @Path("testentities/{id}")
    public Response getTestEntity(@PathParam("id") String id) {
        log.debug("get {}", id);

        TypedQuery<TestEntity> query = em.createQuery("FROM TestEntity WHERE key = :key", TestEntity.class);
        try {
            TestEntity result = query.setParameter("key", id).getSingleResult();
            return Response.ok(result).build();
        } catch (NoResultException e) {
            return Response.status(Status.NOT_FOUND).build();
        }
    }

    @POST
    @Path("testentities")
    public Response createTestEntity(TestEntity testentity, @Context UriInfo uriInfo) {
        log.debug("post {}", testentity);

        em.persist(testentity);
        em.flush();

        UriBuilder builder = uriInfo.getBaseUriBuilder();
        builder.path("testentities").path("" + testentity.getKey());
        return Response.created(builder.build()).build();
    }

    @PUT
    @Path("testentities/{id}")
    public Response updateTestEntity(@PathParam("id") String id, TestEntity testentity) {
        log.debug("put id {}: {}", id, testentity);

        if (id != testentity.getKey()) {
            String message = "id conflict! path=" + id + ", body=" + testentity.getKey() + ".\n"
                + "either leave the id in the body null or set it to the same id";
            return Response.status(Status.BAD_REQUEST).entity(message).build();
        }
        TestEntity result = em.merge(testentity);
        if (result == null) {
            return Response.status(Status.NOT_FOUND).build();
        }
        return Response.ok(result).build();
    }

    @DELETE
    @Path("testentities/{id}")
    public Response deleteTestEntity(@PathParam("id") String id) {
        log.debug("delete {}", id);

        TestEntity result = em.find(TestEntity.class, id);
        if (result == null) {
            return Response.status(Status.NOT_FOUND).build();
        }
        em.remove(result);
        return Response.ok(result).build();
    }
}

package com.github.t1.webresource;

import java.math.BigDecimal;
import java.util.*;

import javax.ejb.Stateless;
import javax.persistence.*;

import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.ws.rs.core.Response.*;

import org.slf4j.*;

@Path("/testentities")
@Stateless
public class TestEntityWebResource {
    private final Logger log = LoggerFactory.getLogger(TestEntityWebResource.class);

    @PersistenceContext
    private EntityManager em;

    @GET
    public List<TestEntity> list() {
        log.debug("get all testentities");

        return em.createQuery("FROM TEST_ENTITY ORDER BY id", TestEntity.class).getResultList();
    }

    @GET
    @Path("/{id}")
    public Response getTestEntity(@PathParam("id") BigDecimal id) {
        log.debug("get testentity {}", id);

        TestEntity result = em.find(TestEntity.class, id);
        if (result == null) {
            return Response.status(Status.NOT_FOUND).build();
        }

        return Response.ok(result).build();
    }

    @POST
    public Response createTestEntity(TestEntity testentity, @Context UriInfo uriInfo) {
        log.debug("post testentity {}", testentity);

        if (testentity.getId() == null) {
            em.persist(testentity);
        } else {
            testentity = em.merge(testentity);
        }
        em.flush();

        UriBuilder builder = uriInfo.getBaseUriBuilder();
        builder.path("testentities").path(Objects.toString(testentity.getId()));
        return Response.created(builder.build()).build();
    }

    @PUT
    @Path("/{id}")
    public Response updateTestEntity(@PathParam("id") BigDecimal id, TestEntity testentity) {
        log.debug("put testentity id {}: {}", id, testentity);

        if (testentity.getId() == null) {
            testentity.setId(id);
        } else if (!testentity.getId().equals(id)) {
            String message = "id conflict! path=" + id + ", body=" + testentity.getId() + ".\n"
                + "either leave the id in the body null or set it to the same id";
            return Response.status(Status.BAD_REQUEST).entity(message).build();
        }

        TestEntity result = em.merge(testentity);
        em.flush();

        if (result == null) {
            return Response.status(Status.NOT_FOUND).build();
        }
        return Response.ok(result).build();
    }

    @DELETE
    @Path("/{id}")
    public Response deleteTestEntity(@PathParam("id") BigDecimal id) {
        log.debug("delete testentity {}", id);

        TestEntity result = em.find(TestEntity.class, id);
        if (result == null) {
            return Response.status(Status.NOT_FOUND).build();
        }

        em.remove(result);

        return Response.ok(result).build();
    }
}
